{"version":3,"sources":["components/Parse/parse.module.css","components/Table/Table.module.css","components/Spinner/Spinner.module.css","components/Table/Table.js","components/Spinner/Spinner.js","components/Parse/parse.js","App.jsx","index.js"],"names":["module","exports","Table","data","headers","tableBody","useRef","useEffect","current","objOfTableColumns","map","header","includes","split","join","reduce","accObj","normalizedHeader","collection","querySelectorAll","key","validate","clientObj","forEach","item","textContent","length","slice","classList","add","s","error","test","Number","isInteger","idx","isNaN","date","validateDate","moment","dateNotValid","className","wrapBlock","tableClients","index","ref","client","clientKeys","Object","keys","ID","Spinner","classNames","iconSpin","IDLE","PENDING","ERROR","SUCCESS","ReaderCSV","useState","dataCSV","setDataCSV","headersCSV","setHeadersCSV","status","setStatus","buttonRef","handleOpenDialog","event","open","onFileLoad","arrOfObjCSV","trimmedArrOfArrCSV","el","trim","push","strCSV","parsedClientsCSV","dsvFormat","parse","clientsWithDublicateProp","phoneNumber","toLowerCase","yearlyIncome","toFixed","toUpperCase","license","Phone","Email","onError","err","file","inputElem","reason","console","log","type","onClick","btnLoad","errorBlock","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.704af2d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnLoad\":\"parse_btnLoad__zwAtY\",\"errorBlock\":\"parse_errorBlock__19EUx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapBlock\":\"Table_wrapBlock__3m5Bg\",\"tableClients\":\"Table_tableClients__250uo\",\"error\":\"Table_error__4Mi-2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"iconSpin\":\"Spinner_iconSpin__DshYl\",\"icon-spin\":\"Spinner_icon-spin__3WqPZ\"};","import { useEffect, useRef } from 'react';\nimport validateDate from \"validate-date\";\nimport moment from 'moment';\nimport s from './Table.module.css';\n\nexport default function Table({ data, headers }) {\n    const tableBody = useRef(null);\n    useEffect(() => {\n        if (!tableBody.current) {\n            return;\n        }\n\n        const normalizedHeaders = headers.map(header => header.includes(' ')\n            ? header.split(' ').join('.')\n            : header);\n\n        const objOfTableColumns = normalizedHeaders.reduce((accObj, normalizedHeader) => {\n            if (normalizedHeader === \"ID\" || normalizedHeader === \"Full.Name\" || normalizedHeader === \"License.states\" || normalizedHeader === \"Duplicate.with\") {\n                return accObj;\n            }\n            const collection = tableBody.current.querySelectorAll(`.${normalizedHeader}`);\n            return { ...accObj, [normalizedHeader]: collection };\n        }, {})\n\n        for (const key in objOfTableColumns) {\n            validate(key, objOfTableColumns)\n        }\n\n        function validate(key, clientObj) {\n            const collection = clientObj[key];\n            switch (key) {\n                case \"Phone\":\n                    collection.forEach(item => {\n                        if (item.textContent.length !== 12 || item.textContent.slice(0, 2) !== \"+1\") {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                case \"Email\":\n                    collection.forEach(item => {\n                        if (!/^([a-z0-9_.-])+@[a-z0-9-]+\\.([a-z]{2,4}\\.)?[a-z]{2,4}$/.test(item.textContent)) {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                case \"Age\":\n                    collection.forEach(item => {\n                        if (!Number.isInteger(Number(item.textContent)) || item.textContent < 21) {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                case \"Experience\":\n                    collection.forEach((item, idx) => {\n                        if (item.textContent < 0 || +item.textContent > +clientObj[\"Age\"][idx].textContent) {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                case \"Yearly.Income\":\n                    collection.forEach(item => {\n                        if (isNaN(item.textContent) || item.textContent < 0 || item.textContent > 1000000) {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                case \"Has.children\":\n                    collection.forEach(item => {\n                        if (!(item.textContent===\"TRUE\" || item.textContent===\"FALSE\" || item.textContent===\"\")) {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                case \"License.number\":\n                    collection.forEach(item => {\n                        if (!(item.textContent.length===6 && /^[A-Za-z0-9]+$/.test(item.textContent))) {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                case \"Expiration.date\":\n                    collection.forEach(item => {\n                        if (dateNotValid(item.textContent)) {\n                            item.classList.add(s.error);\n                        }\n                    })\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        function dateNotValid(date) {\n            if (!date || !validateDate(date, \"boolean\")) {\n                    return true;\n            }\n            if (date.includes('-')) {\n                return moment(date) - moment() > 0 ? false : true;\n            }\n            if (date.includes('/')) {\n                return moment(date, \"MM/DD/YYYY\") - moment() > 0 ? false : true;\n            }\n        }\n    }, [headers])\n\n    return (\n        <div className={s.wrapBlock} >\n            <table className={s.tableClients}>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        {headers.map((header, index) => (<th key={index}>{header}</th>))}\n                    </tr>\n                </thead>\n\n                <tbody ref={tableBody}>\n                    {data.map((client) => {\n                        const clientKeys = Object.keys(client);\n                        return (<tr key={client.ID}>\n                            {clientKeys.map((key, idx) => <td key={idx} className={key}>{client[key]}</td>)}\n                        </tr>)\n                    })}\n                </tbody>\n            </table>\n        </div>\n    )\n}","import { CgSpinnerTwoAlt } from 'react-icons/cg';\nimport s from './Spinner.module.css'\n\nexport default function Spinner({classNames=\"\"}) {\n    return <CgSpinnerTwoAlt className={`${s.iconSpin} ${classNames}`}/>;\n}","import {useRef, useState} from 'react';\nimport { CSVReader } from 'react-papaparse';\nimport { dsvFormat } from 'd3-dsv';\nimport Table from '../Table';\nimport Spinner from '../Spinner';\nimport s from './parse.module.css'\n\nconst { IDLE, PENDING, ERROR, SUCCESS } = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    ERROR: 'error',\n    SUCCESS: 'success'\n}\n\nexport default function ReaderCSV() {\n    const [dataCSV, setDataCSV] = useState();\n    const [headersCSV, setHeadersCSV] = useState();\n    const [status, setStatus] = useState(IDLE);\n    const buttonRef = useRef();\n\n    const phoneNormalize = (phoneNumber) => {\n        if (phoneNumber.length === 10) {\n            return \"+1\"+phoneNumber;\n        }\n        if (phoneNumber.length === 11 && phoneNumber.slice(0, 1) === \"1\") {\n            return \"+\"+phoneNumber;\n        }\n        return phoneNumber;\n    }\n\n    const yearlyIncomeNormalize = (yearlyIncome) => {\n        return Number(yearlyIncome)\n            ? Number(yearlyIncome).toFixed(2)\n            : yearlyIncome;\n    }\n\n    const licenseNormalize = (license) => {\n        if (license.includes('|')) {\n            const licenseArr = license.split('|');\n            const shortCutLicenseArr = licenseArr.map(license => license.trim().slice(0, 2).toUpperCase());\n            return shortCutLicenseArr.join(\", \");\n        }\n        return license.slice(0, 2).toUpperCase();\n    }\n\n    const handleOpenDialog = (event) => {\n        buttonRef.current && buttonRef.current.open(event);\n    }\n\n    const handleOnFileLoad = (arrOfObjCSV) => {\n        setStatus(PENDING);\n\n        const trimmedArrOfArrCSV = arrOfObjCSV.map(({ data }) =>\n            data.map(el => el.trim())\n        )\n\n        trimmedArrOfArrCSV[0].push(\"Duplicate with\");\n        setHeadersCSV(trimmedArrOfArrCSV[0]);\n        const arrOfStrings = trimmedArrOfArrCSV.map(el => el.join(';'));\n        const strCSV = arrOfStrings.join('\\n');\n        const parsedClientsCSV = dsvFormat(\";\").parse(strCSV);\n        const error = parsedClientsCSV.reduce((error, client) => {\n            if (!client[\"Full Name\"] || !client[\"Phone\"] || !client[\"Email\"]) {\n                error = true;\n            }\n            return error;\n        }, false)\n        if (error) {\n            setStatus(ERROR);\n            return;\n        }\n        const normalizedClients = parsedClientsCSV.map(client => {\n\n            return {\n                ...client,\n                \"Phone\": phoneNormalize(client[\"Phone\"]),\n                \"Email\": client[\"Email\"].toLowerCase(),\n                \"Yearly Income\": yearlyIncomeNormalize(client[\"Yearly Income\"]),\n                \"Has children\": client[\"Has children\"].toUpperCase(),\n                \"License states\": licenseNormalize(client[\"License states\"])\n            };\n        })\n        const clientsWithDublicateProp = normalizedClients.map((client, idx) => ({ \"ID\": idx + 1, ...client, \"Duplicate with\": [] }));\n        clientsWithDublicateProp.forEach(({ID, Phone, Email}) => {\n            clientsWithDublicateProp.forEach(client => {\n                if (client.ID !== ID && (client.Phone === Phone || client.Email === Email)) {\n                    client[\"Duplicate with\"] = ID;\n                }\n            })\n        })\n        setDataCSV(clientsWithDublicateProp);\n        setStatus(SUCCESS);\n  }\n\n  const handleOnError = (err, file, inputElem, reason) => {\n      console.log(err, file, inputElem, reason);\n  }\n\n    return (\n      <>\n        <CSVReader\n          ref={buttonRef}\n          onFileLoad={handleOnFileLoad}\n          onError={handleOnError}\n        >\n          {() => (\n            <>\n              <button type='button' onClick={handleOpenDialog} className={s.btnLoad} >\n                Import users\n              </button>\n            </>\n          )}\n        </CSVReader>\n        {status===SUCCESS && <Table data={dataCSV} headers={headersCSV} />}\n        {status===ERROR && (\n            <div className={s.errorBlock}>\n                <h1>File format is not correct</h1>\n            </div>)\n            }\n        {status===PENDING && <Spinner/>}\n      </>\n    )\n}","import './App.css';\nimport CSVReader from './components/Parse';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CSVReader/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}