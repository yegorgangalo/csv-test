{"version":3,"sources":["components/Table/Table.module.css","components/Parse/parse.module.css","components/Spinner/Spinner.module.css","components/Table/Table.js","components/Spinner/Spinner.js","components/Parse/parse.js","App.jsx","index.js"],"names":["module","exports","Table","data","headers","validate","key","clientObj","length","slice","test","Number","isInteger","date","includes","dateArr","split","isExpirationValid","dateNotValid","year","month","day","Date","now","className","s","tableClients","map","header","index","client","clientKeys","Object","keys","idx","error","ID","Spinner","classNames","iconSpin","IDLE","PENDING","ERROR","SUCCESS","ReaderCSV","useState","dataCSV","setDataCSV","headersCSV","setHeadersCSV","status","setStatus","buttonRef","useRef","handleOpenDialog","event","current","open","ref","onFileLoad","arrOfObjCSV","shift","trimmedArrOfArrCSV","el","trim","push","strCSV","join","parsedClientsCSV","dsvFormat","parse","reduce","clientsWithDublicateProp","phoneNumber","toLowerCase","toFixed","toUpperCase","license","forEach","Phone","Email","onError","err","file","inputElem","reason","console","log","type","onClick","btnLoad","errorBlock","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15a98498.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableClients\":\"Table_tableClients__250uo\",\"error\":\"Table_error__4Mi-2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnLoad\":\"parse_btnLoad__zwAtY\",\"errorBlock\":\"parse_errorBlock__19EUx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"iconSpin\":\"Spinner_iconSpin__DshYl\",\"icon-spin\":\"Spinner_icon-spin__3WqPZ\"};","// import { useEffect, useState } from 'react';\nimport s from './Table.module.css';\n\nexport default function Table({data, headers}) {\n\n    function validate(key, clientObj) {\n        if (key === \"Phone\" && (clientObj[key].length !==12 || clientObj[key].slice(0,2)!==\"+1\" )) {\n            return false;\n        }\n        if (key === \"Email\" && !(/^([a-z0-9_.-])+@[a-z0-9-]+\\.([a-z]{2,4}\\.)?[a-z]{2,4}$/.test(clientObj[key]) )) {\n            return false;\n        }\n        if (key === \"Age\" && (!Number.isInteger(Number(clientObj[key])) || clientObj[key] < 21)) {\n            return false;\n        }\n        if (key === \"Experience\" && (clientObj[key] < 0 || clientObj[key] > clientObj[\"Age\"])) {\n            return false;\n        }\n        if (key === \"Yearly Income\" && (clientObj[key] > 1000000)) {\n            return false;\n        }\n        if (key === \"Has children\" && !(clientObj[key]===\"TRUE\" || clientObj[key]===\"FALSE\" || clientObj[key]===\"\")) {\n            return false;\n        }\n        if (key === \"License number\" && !(clientObj[key].length===6 && /^[A-Za-z0-9]+$/.test(clientObj[key]))) {\n            return false;\n        }\n        if (key === \"Expiration date\" && dateNotValid(clientObj[key])) {\n            return false;\n        }\n        return true;\n    }\n\n    function dateNotValid(date) {\n        if (date.includes('-')) {\n            const dateArr = date.split('-');\n            if (dateArr[0].length === 4) {\n                const year = dateArr[0];\n                const month = dateArr[1];\n                const day = dateArr[2];\n                return isExpirationValid(year, month, day);\n            }\n        }\n        if (date.includes('/')) {\n            const dateArr = date.split('/');\n            if (dateArr[2].length === 4) {\n                const year = dateArr[2];\n                const month = dateArr[0];\n                const day = dateArr[1];\n                return isExpirationValid(year, month, day);\n            }\n        }\n        return true;\n    }\n\n    function isExpirationValid(year, month, day) {\n        if (month > 12 || month < 1 || day > 31 || day < 1) {\n            return true;\n        }\n        const expirationDate = new Date(year, month - 1, day);\n        const currentDate = Date.now();\n        return expirationDate - currentDate > 0 ? false : true;\n    }\n\n    return (\n        <table className={s.tableClients}>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    {headers.map((header, index) => (<th key={index}>{header}</th>))}\n                </tr>\n            </thead>\n\n            <tbody>\n                {data.map((client) => {\n                    const clientKeys = Object.keys(client);\n                    return (<tr key={client.ID}>\n                        {clientKeys.map((key, idx) => {\n                            return validate(key, client)\n                                ? (<td key={idx}>{client[key]}</td>)\n                                : (<td key={idx} className={s.error} >{client[key]}</td>)\n                        })}\n                    </tr>)\n                })}\n            </tbody>\n        </table>\n    )\n}","import { CgSpinnerTwoAlt } from 'react-icons/cg';\nimport s from './Spinner.module.css'\n\nexport default function Spinner({classNames=\"\"}) {\n    return <CgSpinnerTwoAlt className={`${s.iconSpin} ${classNames}`}/>;\n}","import {useRef, useState} from 'react';\nimport { CSVReader } from 'react-papaparse';\nimport { dsvFormat } from 'd3-dsv';\nimport Table from '../Table';\nimport Spinner from '../Spinner';\nimport s from './parse.module.css'\n\nconst { IDLE, PENDING, ERROR, SUCCESS } = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    ERROR: 'error',\n    SUCCESS: 'success'\n}\n\nexport default function ReaderCSV() {\n    const [dataCSV, setDataCSV] = useState();\n    const [headersCSV, setHeadersCSV] = useState();\n    const [status, setStatus] = useState(IDLE);\n    const buttonRef = useRef();\n\n    const phoneNormalize = (phoneNumber) => {\n        if (phoneNumber.length === 10) {\n            return \"+1\"+phoneNumber;\n        }\n        if (phoneNumber.length === 11 && phoneNumber.slice(0, 1) === \"1\") {\n            return \"+\"+phoneNumber;\n        }\n        return phoneNumber;\n    }\n\n    const licenseNormalize = (license) => {\n        if (license.includes(',')) {\n            const licenseArr = license.split(',');\n            const shortCutLicenseArr = licenseArr.map(license => license.trim().slice(0, 2).toUpperCase())\n            return shortCutLicenseArr.join(\", \");\n        }\n        if (license.includes('|')) {\n            const licenseArr = license.split('|');\n            const shortCutLicenseArr = licenseArr.map(license => license.trim().slice(0, 2).toUpperCase())\n            return shortCutLicenseArr.join(\", \");\n        }\n        if (license.includes(' ')) {\n            const licenseArr = license.split(' ');\n            const shortCutLicenseArr = licenseArr.map(license => license.trim().slice(0, 2).toUpperCase())\n            return shortCutLicenseArr.join(\", \");\n        }\n        return license;\n    }\n\n    const handleOpenDialog = (event) => {\n        buttonRef.current && buttonRef.current.open(event);\n    }\n\n    const handleOnFileLoad = (arrOfObjCSV) => {\n        setStatus(PENDING);\n        arrOfObjCSV.shift();\n\n        const trimmedArrOfArrCSV = arrOfObjCSV.map(({ data }) =>\n            data.map(el => el.trim())\n        )\n\n        trimmedArrOfArrCSV[0].push(\"Duplicate with\");\n        setHeadersCSV(trimmedArrOfArrCSV[0]);\n\n        const arrOfStrings = trimmedArrOfArrCSV.map(el => el.join(';'));\n        const strCSV = arrOfStrings.join('\\n');\n        const parsedClientsCSV = dsvFormat(\";\").parse(strCSV);\n        const error = parsedClientsCSV.reduce((error, client) => {\n            if (!client[\"Full Name\"] || !client[\"Phone\"] || !client[\"Email\"]) {\n                error = true;\n            }\n            return error;\n        }, false)\n        if (error) {\n            setStatus(ERROR);\n            return;\n        }\n        const normalizedClients = parsedClientsCSV.map(client => {\n\n            return {\n                ...client,\n                \"Phone\": phoneNormalize(client[\"Phone\"]),\n                \"Email\": client[\"Email\"].toLowerCase(),\n                \"Yearly Income\": Number(client[\"Yearly Income\"]).toFixed(2),\n                \"Has children\": client[\"Has children\"].toUpperCase(),\n                \"License states\": licenseNormalize(client[\"License states\"])\n                // \"Expiration date\": dateNormalize(client[\"Expiration date\"])\n            };\n        })\n        const clientsWithDublicateProp = normalizedClients.map((client, idx) => ({ \"ID\": idx + 1, ...client, \"Duplicate with\": [] }));\n        clientsWithDublicateProp.forEach(({ID, Phone, Email}) => {\n            clientsWithDublicateProp.forEach(client => {\n                if (client.ID !== ID && (client.Phone === Phone || client.Email === Email)) {\n                    client[\"Duplicate with\"] = ID;\n                    // client[\"Duplicate with\"].push(ID);\n                }\n            })\n        })\n        setDataCSV(clientsWithDublicateProp);\n        setStatus(SUCCESS);\n  }\n\n  const handleOnError = (err, file, inputElem, reason) => {\n      console.log(err, file, inputElem, reason);\n  }\n\n    return (\n      <>\n        <CSVReader\n          ref={buttonRef}\n          onFileLoad={handleOnFileLoad}\n          onError={handleOnError}\n        >\n          {() => (\n            <>\n              <button type='button' onClick={handleOpenDialog} className={s.btnLoad} >\n                Import users\n              </button>\n            </>\n          )}\n        </CSVReader>\n        {status===SUCCESS && <Table data={dataCSV} headers={headersCSV} />}\n        {status===ERROR && (\n            <div className={s.errorBlock}>\n                <h1>File format is not correct</h1>\n            </div>)\n            }\n        {status===PENDING && <Spinner/>}\n      </>\n    )\n}","import './App.css';\nimport CSVReader from './components/Parse';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CSVReader/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}